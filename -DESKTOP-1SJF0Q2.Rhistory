ncol = 1,
)
for (res in seq_len(length(clu_chrs_result))) {
# sum(fireCaller_result[[res]]$FIRE_output$Mousse_cells_clus_12_indicator)
ncrhs[res, 1] <- length(clu_chrs_result[[res]]$crhs)
}
sum(ncrhs[, 1])
create_bip_clust_graph_from_cell <- function(whole_cell_matrix, scHic_promoters_vec, cell_num, resolution = "6Mb"){
par_default <- par(bty = 'n')
row.names(whole_cell_matrix) = colnames(whole_cell_matrix)
crhs_in_resolution = list()
resolution_part = 562
# Initilisation des des régions
if(resolution == "1Mb"){
resolution_part = c(1, 94, 187, 281, 375, 468, 562)
}else if(resolution == "2Mb"){
resolution_part = c(1, 187, 374, 562)
}else if(resolution == "3Mb"){
resolution_part = c(1, 281, 562)
}
if(length(resolution_part)==1){
cell_matrix <- whole_cell_matrix[
scHic_promoters_vec,
-scHic_promoters_vec,
drop=FALSE
]
crhs = call_igraph_fn(cell_matrix, cell_num, resolution)
crhs_in_resolution[[length(crhs_in_resolution)+1]] = list(
"crhs_in_resolution" = crhs
)
}else if(length(resolution_part)>1){
for (res in seq_len(length(resolution_part)-1)) {
cell_matrix = whole_cell_matrix[
resolution_part[res]:resolution_part[res+1],
resolution_part[res]:resolution_part[res+1],
drop=FALSE
]
promoters = scHic_promoters_ids[scHic_promoters_ids %in% resolution_part[res]:resolution_part[res+1]]
promoters_names = row.names(whole_cell_matrix)[c(promoters)]
promoters_ = which(row.names(cell_matrix) %in% promoters_names)
# print(promoters_)
if(length(promoters)>1){
cell_matrix <- cell_matrix[
promoters_,
-promoters_,
drop=FALSE
]
# print(dim(cell_matrix))
crhs = call_igraph_fn(cell_matrix, cell_num, resolution)
crhs_in_resolution[[length(crhs_in_resolution)+1]] = list(
"crhs_in_resolution" = crhs
)
}
}
}
names(crhs_in_resolution) <- str_c(resolution, ".", seq_len(length(resolution_part)-1), seq_len(length(crhs_in_resolution)))
crhs_in_resolution
}
get_clusters_crhs <- function(clusters_matrix, resolution = "6Mb"){
clu_chrs_result = list()
for (clus in seq_len(length(clusters_matrix))) {
net = create_bip_clust_graph_from_cell(clusters_matrix[[clus]], scHic_promoters_ids, clus, resolution)
clu_chrs_result[[length(clu_chrs_result)+1]] <- net
}
names(clu_chrs_result) <- str_c("cluster", seq_len(length(clusters_matrix)))
clu_chrs_result
}
clu_chrs_result <- get_clusters_crhs(cluster_matrix_result, resolution = "2Mb")
clu_chrs_result$cluster1$2Mb.11
str(clu_chrs_result$cluster1$2Mb.11)
call_igraph_fn <- function(cell_matrix, cell_num, resolution){
net_bip <- graph_from_incidence_matrix(
cell_matrix
)
# Effacer les connections multiples entre les noeuds
if(!is_simple(net_bip)){
net_bip <- simplify(net_bip, remove.multiple = FALSE, remove.loops = TRUE)
# net <- simplify(net, remove.multiple = FALSE, remove.loops = TRUE)
}
net_components_bip <- components(net_bip, mode = c("weak", "strong"))
# net_components <- components(net, mode = c("weak", "strong"))
#biggest_cluster <- which.max(net_components$csize)
#net_comp2 <- clusters(net, mode="weak")
plot_main_cluster <- which(net_components_bip$csize>1)
vert_ids <- V(net_bip)[net_components_bip$membership %in% plot_main_cluster]
net_to_plot <- induced_subgraph(net_bip, vert_ids)
V(net_to_plot)$color <- V(net_to_plot)$type
V(net_to_plot)$color=gsub("FALSE","red",V(net_to_plot)$color)
V(net_to_plot)$color=gsub("TRUE","lightblue",V(net_to_plot)$color)
# file_name = paste0("graphique_rep", rep_num, "_block", b, ".jpeg")
# jpeg(file_name, width = 980, height = 680)
# par(mar = c(1, 1, 1, 1))
# plot(net_to_plot, edge.arrow.size=.2,vertex.label=NA, main = paste0("Représenation graphique du block ", b, " pour le replicat ", rep_num))
# dev.off()
# A ce niveau, on prend chaque matrice d'incidence des différents CRHs qu'on ajoute à une liste
crhs = list()
for (i in (1:net_components_bip$no)[net_components_bip$csize>1]){
members <- net_components_bip$membership
mat_bin = cell_matrix[
rownames(cell_matrix) %in% names(members[members==i]),
colnames(cell_matrix) %in% names(members[members==i]),
drop=FALSE
]
crhs[[length(crhs)+1]] = list(
"name" = str_c("( ", cell_num, ".", resolution, " )"),
"mat_incidence" = mat_bin
)
}
names(crhs) <- str_c("crhs", ".", resolution, 1:length(crhs))
res <- list(
"dist_bin" = cell_matrix,
"net_to_plot" = net_to_plot,
"membership_bip" = net_components_bip$membership,
"csize_bip" = net_components_bip$csize,
"no_bip" = net_components_bip$no,
"crhs" = crhs
)
res
}
create_bip_clust_graph_from_cell <- function(whole_cell_matrix, scHic_promoters_vec, cell_num, resolution = "6Mb"){
par_default <- par(bty = 'n')
row.names(whole_cell_matrix) = colnames(whole_cell_matrix)
crhs_in_resolution = list()
resolution_part = 562
# Initilisation des des régions
if(resolution == "1Mb"){
resolution_part = c(1, 94, 187, 281, 375, 468, 562)
}else if(resolution == "2Mb"){
resolution_part = c(1, 187, 374, 562)
}else if(resolution == "3Mb"){
resolution_part = c(1, 281, 562)
}
if(length(resolution_part)==1){
cell_matrix <- whole_cell_matrix[
scHic_promoters_vec,
-scHic_promoters_vec,
drop=FALSE
]
crhs = call_igraph_fn(cell_matrix, cell_num, resolution)
crhs_in_resolution[[length(crhs_in_resolution)+1]] = list(
"crhs_in_resolution" = crhs
)
}else if(length(resolution_part)>1){
for (res in seq_len(length(resolution_part)-1)) {
cell_matrix = whole_cell_matrix[
resolution_part[res]:resolution_part[res+1],
resolution_part[res]:resolution_part[res+1],
drop=FALSE
]
promoters = scHic_promoters_ids[scHic_promoters_ids %in% resolution_part[res]:resolution_part[res+1]]
promoters_names = row.names(whole_cell_matrix)[c(promoters)]
promoters_ = which(row.names(cell_matrix) %in% promoters_names)
# print(promoters_)
if(length(promoters)>1){
cell_matrix <- cell_matrix[
promoters_,
-promoters_,
drop=FALSE
]
# print(dim(cell_matrix))
crhs = call_igraph_fn(cell_matrix, cell_num, resolution)
crhs_in_resolution[[length(crhs_in_resolution)+1]] = list(
"crhs_in_resolution" = crhs
)
}
}
}
names(crhs_in_resolution) <- str_c(resolution, ".", seq_len(length(crhs_in_resolution)))
crhs_in_resolution
}
clu_chrs_result <- get_clusters_crhs(cluster_matrix_result, resolution = "2Mb")
create_bip_clust_graph_from_cell <- function(whole_cell_matrix, scHic_promoters_vec, cell_num, resolution = "6Mb"){
par_default <- par(bty = 'n')
row.names(whole_cell_matrix) = colnames(whole_cell_matrix)
crhs_in_resolution = list()
resolution_part = 562
# Initilisation des des régions
if(resolution == "1Mb"){
resolution_part = c(1, 94, 187, 281, 375, 468, 562)
}else if(resolution == "2Mb"){
resolution_part = c(1, 187, 374, 562)
}else if(resolution == "3Mb"){
resolution_part = c(1, 281, 562)
}
if(length(resolution_part)==1){
cell_matrix <- whole_cell_matrix[
scHic_promoters_vec,
-scHic_promoters_vec,
drop=FALSE
]
crhs = call_igraph_fn(cell_matrix, cell_num, resolution)
crhs_in_resolution[[length(crhs_in_resolution)+1]] = list(
"crhs_in_resolution" = crhs
)
}else if(length(resolution_part)>1){
for (res in seq_len(length(resolution_part)-1)) {
cell_matrix = whole_cell_matrix[
resolution_part[res]:resolution_part[res+1],
resolution_part[res]:resolution_part[res+1],
drop=FALSE
]
promoters = scHic_promoters_ids[scHic_promoters_ids %in% resolution_part[res]:resolution_part[res+1]]
promoters_names = row.names(whole_cell_matrix)[c(promoters)]
promoters_ = which(row.names(cell_matrix) %in% promoters_names)
# print(promoters_)
if(length(promoters)>1){
cell_matrix <- cell_matrix[
promoters_,
-promoters_,
drop=FALSE
]
# print(dim(cell_matrix))
crhs_in_resolution[[length(crhs_in_resolution)+1]] = list(
"crhs_in_resolution" = call_igraph_fn(cell_matrix, cell_num, resolution)
)
}
}
}
names(crhs_in_resolution) <- str_c(resolution, ".", seq_len(length(crhs_in_resolution)))
crhs_in_resolution
}
clu_chrs_result <- get_clusters_crhs(cluster_matrix_result, resolution = "2Mb")
clu_chrs_result$cluster226$2Mb.1
clu_chrs_result$cluster226$2Mb.1[[1]]
clu_chrs_result$cluster226$2Mb.1$1
create_bip_clust_graph_from_cell <- function(whole_cell_matrix, scHic_promoters_vec, cell_num, resolution = "6Mb"){
par_default <- par(bty = 'n')
row.names(whole_cell_matrix) = colnames(whole_cell_matrix)
crhs_in_resolution = list()
resolution_part = 562
# Initilisation des des régions
if(resolution == "1Mb"){
resolution_part = c(1, 94, 187, 281, 375, 468, 562)
}else if(resolution == "2Mb"){
resolution_part = c(1, 187, 374, 562)
}else if(resolution == "3Mb"){
resolution_part = c(1, 281, 562)
}
if(length(resolution_part)==1){
cell_matrix <- whole_cell_matrix[
scHic_promoters_vec,
-scHic_promoters_vec,
drop=FALSE
]
crhs = call_igraph_fn(cell_matrix, cell_num, resolution)
crhs_in_resolution[[length(crhs_in_resolution)+1]] = list(
"crhs_in_resolution" = crhs
)
}else if(length(resolution_part)>1){
for (res in seq_len(length(resolution_part)-1)) {
cell_matrix = whole_cell_matrix[
resolution_part[res]:resolution_part[res+1],
resolution_part[res]:resolution_part[res+1],
drop=FALSE
]
promoters = scHic_promoters_ids[scHic_promoters_ids %in% resolution_part[res]:resolution_part[res+1]]
promoters_names = row.names(whole_cell_matrix)[c(promoters)]
promoters_ = which(row.names(cell_matrix) %in% promoters_names)
# print(promoters_)
if(length(promoters)>1){
cell_matrix <- cell_matrix[
promoters_,
-promoters_,
drop=FALSE
]
# print(dim(cell_matrix))
res = call_igraph_fn(cell_matrix, cell_num, resolution)
str(res)
# crhs_in_resolution[[length(crhs_in_resolution)+1]] = list(
#   "crhs_in_resolution" = call_igraph_fn(cell_matrix, cell_num, resolution)
# )
}
}
}
names(crhs_in_resolution) <- str_c(resolution, ".", seq_len(length(crhs_in_resolution)))
crhs_in_resolution
}
clu_chrs_result <- get_clusters_crhs(cluster_matrix_result, resolution = "2Mb")
create_bip_clust_graph_from_cell <- function(whole_cell_matrix, scHic_promoters_vec, cell_num, resolution = "6Mb"){
par_default <- par(bty = 'n')
row.names(whole_cell_matrix) = colnames(whole_cell_matrix)
crhs_in_resolution = list()
resolution_part = 562
# Initilisation des des régions
if(resolution == "1Mb"){
resolution_part = c(1, 94, 187, 281, 375, 468, 562)
}else if(resolution == "2Mb"){
resolution_part = c(1, 187, 374, 562)
}else if(resolution == "3Mb"){
resolution_part = c(1, 281, 562)
}
if(length(resolution_part)==1){
cell_matrix <- whole_cell_matrix[
scHic_promoters_vec,
-scHic_promoters_vec,
drop=FALSE
]
crhs = call_igraph_fn(cell_matrix, cell_num, resolution)
crhs_in_resolution[[length(crhs_in_resolution)+1]] = list(
"crhs_in_resolution" = crhs
)
}else if(length(resolution_part)>1){
for (res in seq_len(length(resolution_part)-1)) {
cell_matrix = whole_cell_matrix[
resolution_part[res]:resolution_part[res+1],
resolution_part[res]:resolution_part[res+1],
drop=FALSE
]
promoters = scHic_promoters_ids[scHic_promoters_ids %in% resolution_part[res]:resolution_part[res+1]]
promoters_names = row.names(whole_cell_matrix)[c(promoters)]
promoters_ = which(row.names(cell_matrix) %in% promoters_names)
# print(promoters_)
if(length(promoters)>1){
cell_matrix <- cell_matrix[
promoters_,
-promoters_,
drop=FALSE
]
# print(dim(cell_matrix))
crhs = call_igraph_fn(cell_matrix, cell_num, resolution)
# str(res)
crhs_in_resolution[[length(crhs_in_resolution)+1]] = list(
"crhs_in_resolution" = crhs
)
}
}
}
names(crhs_in_resolution) <- str_c(resolution, ".", seq_len(length(crhs_in_resolution)))
crhs_in_resolution
}
clu_chrs_result <- get_clusters_crhs(cluster_matrix_result, resolution = "2Mb")
clu_chrs_result$cluster1$2Mb.1
str(clu_chrs_result$cluster1$2Mb.1)
create_bip_clust_graph_from_cell <- function(whole_cell_matrix, scHic_promoters_vec, cell_num, resolution = "6Mb"){
par_default <- par(bty = 'n')
row.names(whole_cell_matrix) = colnames(whole_cell_matrix)
crhs_in_resolution = list()
resolution_part = 562
# Initilisation des des régions
if(resolution == "1Mb"){
resolution_part = c(1, 94, 187, 281, 375, 468, 562)
}else if(resolution == "2Mb"){
resolution_part = c(1, 187, 374, 562)
}else if(resolution == "3Mb"){
resolution_part = c(1, 281, 562)
}
if(length(resolution_part)==1){
cell_matrix <- whole_cell_matrix[
scHic_promoters_vec,
-scHic_promoters_vec,
drop=FALSE
]
crhs = call_igraph_fn(cell_matrix, cell_num, resolution)
crhs_in_resolution[[length(crhs_in_resolution)+1]] = list(
"crhs_in_resolution" = crhs
)
}else if(length(resolution_part)>1){
for (res in seq_len(length(resolution_part)-1)) {
cell_matrix = whole_cell_matrix[
resolution_part[res]:resolution_part[res+1],
resolution_part[res]:resolution_part[res+1],
drop=FALSE
]
promoters = scHic_promoters_ids[scHic_promoters_ids %in% resolution_part[res]:resolution_part[res+1]]
promoters_names = row.names(whole_cell_matrix)[c(promoters)]
promoters_ = which(row.names(cell_matrix) %in% promoters_names)
# print(promoters_)
if(length(promoters)>1){
cell_matrix <- cell_matrix[
promoters_,
-promoters_,
drop=FALSE
]
# print(dim(cell_matrix))
crhs = call_igraph_fn(cell_matrix, cell_num, resolution)
# str(res)
crhs_in_resolution[[length(crhs_in_resolution)+1]] = list(
"crhs_in_resolution" = crhs
)
}
}
}
names(crhs_in_resolution) <- str_c("res", resolution, ".", seq_len(length(crhs_in_resolution)))
crhs_in_resolution
}
clu_chrs_result <- get_clusters_crhs(cluster_matrix_result, resolution = "2Mb")
create_bip_clust_graph_from_cell <- function(whole_cell_matrix, scHic_promoters_vec, cell_num, resolution = "6Mb"){
par_default <- par(bty = 'n')
row.names(whole_cell_matrix) = colnames(whole_cell_matrix)
crhs_in_resolution = list()
resolution_part = 562
# Initilisation des des régions
if(resolution == "1Mb"){
resolution_part = c(1, 94, 187, 281, 375, 468, 562)
}else if(resolution == "2Mb"){
resolution_part = c(1, 187, 374, 562)
}else if(resolution == "3Mb"){
resolution_part = c(1, 281, 562)
}
if(length(resolution_part)==1){
cell_matrix <- whole_cell_matrix[
scHic_promoters_vec,
-scHic_promoters_vec,
drop=FALSE
]
crhs = call_igraph_fn(cell_matrix, cell_num, resolution)
crhs_in_resolution[[length(crhs_in_resolution)+1]] = crhs
}else if(length(resolution_part)>1){
for (res in seq_len(length(resolution_part)-1)) {
cell_matrix = whole_cell_matrix[
resolution_part[res]:resolution_part[res+1],
resolution_part[res]:resolution_part[res+1],
drop=FALSE
]
promoters = scHic_promoters_ids[scHic_promoters_ids %in% resolution_part[res]:resolution_part[res+1]]
promoters_names = row.names(whole_cell_matrix)[c(promoters)]
promoters_ = which(row.names(cell_matrix) %in% promoters_names)
# print(promoters_)
if(length(promoters)>1){
cell_matrix <- cell_matrix[
promoters_,
-promoters_,
drop=FALSE
]
# print(dim(cell_matrix))
crhs = call_igraph_fn(cell_matrix, cell_num, resolution)
# str(res)
crhs_in_resolution[[length(crhs_in_resolution)+1]] = crhs
}
}
}
names(crhs_in_resolution) <- str_c("res", resolution, ".", seq_len(length(crhs_in_resolution)))
crhs_in_resolution
}
clu_chrs_result <- get_clusters_crhs(cluster_matrix_result, resolution = "2Mb")
############## Distribution des crhs ##########
ncrhs <- matrix(
0,
nrow = length(clu_chrs_result),
ncol = 1,
)
############## Distribution des crhs ##########
ncrhs <- matrix(
0,
nrow = length(clu_chrs_result),
ncol = 1,
)
for (res in seq_len(length(clu_chrs_result))) {
# sum(fireCaller_result[[res]]$FIRE_output$Mousse_cells_clus_12_indicator)
n = 0
for (i in seq_len(length(clu_chrs_result[[res]]))) {
n = n + length(clu_chrs_result[[res]][[i]]$crhs)
}
ncrhs[res, 1] <- n
}
sum(ncrhs[, 1])
summary(ncrhs[, 1])
########### Sauvegarde des données ###########
save(clu_chrs_result, file = "rdata/all_rda_data/clu_chrs_result.rda")
# Etape 1 : Chargement des CRHs obtenus a partir des structures dites complexes et après elimination des réseaux redondants
load("rdata/all_rda_data/all_net_result_complex_.rda")
# Etape 2 : Chargement des CRHs obtenus à partir des clusters
load("rdata/all_rda_data/clu_chrs_result.rda")
# Etape 3 : fonction permettant de faire la réduction de matrices
source("scripts/crhs_comparaison/degenerationMatrix_fn.R")
# Etape 4 : fonction permettant de faire la comparaison de CRHs
source("scripts/crhs_comparaison/compute_comparaison.R")
crhs_comparation_res = compute_comparaison(all_net_result_complex_, clu_chrs_result, make_degeneration = FALSE)
crhs_comparation_res$sensibility_mat
nb_crhs_in_clus = dim(crhs_comparation_res$sensibility_mat)[2]
nb_crh_in_struc = dim(crhs_comparation_res$sensibility_mat)[1]
nb_repete <- matrix(
"",
nrow = nb_crh_in_struc,
ncol = 3,
)
for (res in seq_len(nb_crh_in_struc)){
# sum(fireCaller_result[[res]]$FIRE_output$Mousse_cells_clus_12_indicator)
nb_repete[res, 1] <- names(crhs_comparation_res$sensibility_mat[, 1][res])
nb_repete[res, 2] <- names(which.max(crhs_comparation_res$sensibility_mat[res, ]))
nb_repete[res, 3] <- max(crhs_comparation_res$sensibility_mat[res, ])
}
nb_crhs_in_clus = dim(crhs_comparation_res$sensibility_mat)[2]
nb_crh_in_struc = dim(crhs_comparation_res$sensibility_mat)[1]
nb_crh_in_struc
seq_len(nb_crh_in_struc)
length(names(crhs_comparation_res$sensibility_mat[, 1]))
crhs_comparation_res$sensibility_mat
str(crhs_comparation_res$sensibility_mat)
crhs_comparation_res = compute_comparaison(all_net_result_complex_, clu_chrs_result, make_degeneration = FALSE)
crhs_comparation_res$sensibility_mat
is.matrix(crhs_comparation_res$sensibility_mat)
dim(crhs_comparation_res$sensibility_mat)
# Etape 3 : fonction permettant de faire la réduction de matrices
source("scripts/crhs_comparaison/degenerationMatrix_fn.R")
# Etape 4 : fonction permettant de faire la comparaison de CRHs
source("scripts/crhs_comparaison/compute_comparaison.R")
crhs_comparation_res = compute_comparaison(all_net_result_complex_, clu_chrs_result, make_degeneration = FALSE)
dim(crhs_comparation_res$sensibility_mat)
# Etape 4 : fonction permettant de faire la comparaison de CRHs
source("scripts/crhs_comparaison/compute_comparaison.R")
crhs_comparation_res = compute_comparaison(all_net_result_complex_, clu_chrs_result, make_degeneration = FALSE)
install.packages("FactoMineR")
library(FactoMineR)
load("rdata/all_rda_data/res.pca.rda")
ncp_choose = which(res.pca$eig[, 3, drop = FALSE]>=80)[3]
ncp_choose
head(res.pca$ind)
head(res.pca$ind$coord)
load("rdata/all_rda_data/cellUperDiagData.rda")
gc()
load("rdata/all_rda_data/cellUperDiagData.rda")
